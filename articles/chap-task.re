= タスク見積もり

//flushright{
@erukiti

森一樹@viva_tweet_x
//}

仕事をする時、社会人が最初に覚えなければいけないことは、おそらく自分のタスクを見積もる術でしょう。社会人の大半はタスクから逃れられません。

そこでまずはタスク見積もりの基本をおさらいしてみましょう。

== タスクとは？

まず何かしらの命題があります。新しいサービスを立ち上げて収益を得る、社内システムの改善をする、顧客にとって人件費がかかっている作業をシステム化するためのシステム開発などさまざまです。フリーランスでいえば、イラストを描く、小説を書く、ウェブサイトを作成する、環境整備と指導をする、技術記事を書くとか色々あるでしょう。

だいたいの場合において命題というのは、大きな単位であり複数の作業の集合体です。人間は大きな単位、いいかえると雑な認識をしたままでは仕事をすることはできません。その大きな単位を現実的な作業単位に分解する必要があります@<fn>{feeling-task-breakdown}。
//footnote[feeling-task-breakdown][人によっては天性の才能とか直感で、無意識のうちにやってるケースもあるでしょう。そういう働き方もありかもしれませんが、世の中の99%の人は、それでは行き詰まります。]

分解するときには色々な粒度で分解できます。たとえばアジャイル界隈でよく使われるのが「ストーリー」という単位です。「ユーザーがログインする」は1つのストーリーです。ただし、ストーリーそのままでも作業単位としてはまだ大きいのです。

他のプロジェクト管理の方法ではまた違った粒度で管理しているでしょう。これは会社、チームなどによって色々な流儀があります。

しかし、どういうところでも必ず必要になるのがタスクという単位です。まずは大きな単位をタスクに分解することを身につける必要があります。

=== タスク単位に分割する理由

いくつも理由はあります。

==== 報告・連絡・相談

まず上司やチームメンバーに報告するためです。

メンバーが今何をやっていて、どれくらいで終わって次のタスクに取りかかれるかというのは、上司なりチームメンバーなりにとって、把握しておきたいことです@<fn>{task-dependency}。
//footnote[task-dependency][タスクAが完了しないと手をつけられないタスクBのように依存関係がある場合は特にそうです。手が空いた人にやってもらいたいことというのもあるでしょう。そういったチームでの事情です。]

タスクにまだ慣れてない人であれば、タスクの状況というのは、センサーになります。うまくいってるのか？それともうまくいってないのか？早めに状況を知り、必要であれば助けをだすことがチームにとって必要です。

また当人としても、できる限り早めに状況を伝えるべきです。早めの報告、早めの相談、早めの連絡が大切です。

==== タスクの見落としを防ぐため

大きな単位、プロジェクトやストーリーなどを実現するときに必要な作業のすべては、実際にタスクに分割することで見えます。場合によっては、タスク分割しても全貌がはっきりしないケースも普通にあります。

これをサボると必要な工程を見落とすことが多々あります。実は隣のチームと連携しなければいけなくて、それには2週間かかるのに、リリースは1週間後みたいなホラーを体験したくはないですよね？@<fn>{task-horror}

//footnote[task-horror][自チームだけではなく、連携相手にもめちゃくちゃ迷惑かけるし、連携先は実は他にさらに話を通さなければならない相手がいるかもしれません。こういう状況はホラーとしか言いようがありません。]

細かい単位に落とし込むと、どれを先にやらないと後が詰まる、いわゆるボトルネックなども見えてきます。

==== 考えやすい単位にすることで作業しやすくする

タスクに分解するのを何回もこなしてくると、大体パターンが見えてくるでしょう。パターンが見えてくれば、以前やったタスクと同じタスクや似たタスクがあるでしょう。それらは今後も出てくるのではないでしょうか？

手順書を作る、コツをまとめておく、スクリプトを作成して自動化するなど、作業を楽にするための術を身につけないと、いつまでも面倒な繰り返しを延々続けることになります。

=== どうタスク分割をするのか？

上司やチームメンバーが把握したい粒度というのはあります。まずはその決まっている粒度で分割してみましょう。

このとき、分割の仕方がよくわからない場合、チケットシステムのようにチームメンバーがどういうふうにタスク管理しているかを参照できるなら、それらを見てみましょう。

ただし、その粒度は不適切な可能性もあります。細かすぎる場合は報告とかのオーバーヘッドが増えますし、大雑把すぎると、長いタスクになって作業しづらいもの@<fn>{bigtask}になります。

//footnote[bigtask][筆者の感覚として、タスクは30分〜2時間程度で終わるべきだと思っています。]

チームとしてあまり細かいタスクには興味が無いというケースももちろんあるでしょう。特にいちいち細かく指示を出すというのは上司にとって負荷の高いものです。
//footnote[micro-management][いわゆるマイクロマネージメントです。]

その場合、タスクをさらにサブタスクやTODOリストに分割するという方法もあります。サブタスクは共有してもいいですし、自分だけで保持してもいいでしょう。ここらへんはチームでやってるやり方にある程度依存します。チケット方式のタスク管理をしている場合は、システム自体にサブタスクやTODOリスト機能が付いている可能性が高いでしょう。

どうやってもやりにくい、効率が悪いとか感じるのであれば上司なりに相談しましょう@<fn>{angry-boss}。タスク管理についてアドバイスをもらえるかもしれませんし、粒度に関して見直しを考える可能性もあります。
//footnote[angry-boss][相談すると怒られる、出来そうにないという場合は、会社内部で異動できそうなら異動を考える、そもそも会社全体がそういう風潮であれば、ワンストップ転職本を読むべきかもしれませんね。]

=== タスクの定義に必要なもの

まず前提条件の確認が必須です。

期日が決まっていればもちろんそれは前提条件です。

また、要件と呼ばれるものの確認はとても重要ですが、提示された要件が適切かどうか？を確認しなければいけないケースももちろんあります。

大体において依頼主（上司や別チームや顧客、あるいは一人開発で自分かもしれません）の思惑があります。得てしてそれは隠れた前提条件となります。彼らが気づいてない要件もあるかもしれません。

これらの前提をすっ飛すと、ちゃぶ台をひっくり返されたり、信用を失ったり、仕事を失ったりします。

何をすればタスクが完了なのか、ゴールを決めることも大切です。ゴールなきタスクは延々と終わらなかったり、不完全になったり色々します。場合によっては、ゴールについて誰かと相談する必要があるかもしれません。

順調ではないという判定基準もあるとよいでしょう。基準はいろいろあります。実際にコードを書いてみて動かしたけど実行速度の問題がある、15分くらい手が止まってしまった、2時間で機能の実装が完了しなかったなどです。その判定に引っかかった場合は、やり方を間違えてるか、必要な何かが欠けてるか、そもそもタスクが間違ってるかなどを考え直すべきです。

具体的なアクションを書き出すというのも有効なテクニックです。「VSCodeを立ち上げて、○○のファイルを開く」というようなアクションはタスクを開始する時にとても役に立ちます。

その理由は、人間の脳は実際にアクションを起こさないと「やる気」を分泌してくれないからです。実際に実行できるアクションを書き出し、それを実行することで、やる気エンジンが回り出すのです。これは特に朝一に有効です。

ですので、朝一はアクションリストの作成や実際にアクションを起こしてエンジンを回しましょう。ウェブブラウジングを朝にやっちゃうと、その日一日中集中力が途切れがちになるかもしれません。

他にも、タスク定義の時点で、所感を書いておくというのもよいでしょう。これはあとあとになって響いてきます。

=== タスクの時間見積もり

そして、何より本書のテーマである見積もりをしましょう。最初は大雑把でも慣れてくれば少しずつ精度が上がるはずです。

このとき、上司や同僚、会社の文化によって、見積もりの方法は変わってきます。具体的にはバッファを取るかどうかです。

バッファというのは、思ったよりも作業時間がかかりそうなときのための緩衝材です。30分で終わる作業を1時間と見積もったり、3時間の作業を4.5時間としたり、場合によっては2時間の作業を6時間ということもあるでしょう。

バッファが必要な理由は、タスクの見積もりが甘いかもしれないというだけではありません。会社で働いている限りは、割り込みが発生することがあるでしょう。

せっかく作業がはかどっているときにおしゃべりな同僚が話しかけに来る場合もあるかもしれませんし、コンピュータコミュニケーションに不慣れな人が「すいません、今いいですか？」だけの発言を投げつけてくるケース@<fn>{hello-problem}もあるでしょうし、いきなり会議に呼ばれる、会社行事に巻き込まれる、誰かの相談を受ける、おなかが痛くなる、眠いなど。

//footnote[hello-problem][チャット、DMそういったところでは「今いいですか？」だけだと相手にとっては判断できる情報量がありませんね。こういうチャットを投げると相手（特にエンジニア）からは迷惑がられます。]

根本的な割り込み対策ができるならそれをした方がいいかもしれません。たとえば作業中は、緊急以外の通知が飛ばなくする、TwitterやSlackなどのウィンドウを最小化する、あるいはもう閉じてしまう。今集中してます表示をさりげなく出せる方法を考えるなど。

見積もりや時間計測で、割り込みをどう判断するかは、流儀によるでしょう。たまたま、希な割り込みがあったのかもしれませんし、割り込みが常態化しているかもしれません。純粋な作業時間は、ある意味理論上の時間といえるかもしれません。

バッファをまったく設けず、いつも見積もりオーバーをしていると信用をなくすでしょう。しかし、バッファを設けすぎると、夏休み宿題症候群@<fn>{summer-homework}を発祥してしまうかもしれませんし、上司や同僚に「おまえバッファ取り過ぎてるだろ」と指摘されたり、指摘されなくてもそう評価される可能性もあります。

//footnote[summer-homework][40日間という長い期間があるんだから、宿題はラストスパートでいいやとなってしまう奴です。期限が長いと、それに引きずられてダラダラ効率悪くはたいてしまうということもあります。]

見積もりにおいて、バッファをどうするかは、これまた経験を積まないと適切なものが見えてこない類いのものかもしれません。

====[column] 完了

手動でテストする行程が残ってるけど、コードを実装したという段階では、タスクは完了ですか？違いますよね？

完了とはタスクとして定義したものをすべてこなすことです。正確にいうと前提条件をすべて満たすことです。

手動でテストしてあぶり出せる範囲のバグを取ることというのは、前提条件として忘れていたのかもしれません。

いつまでも完了しないタスクがあると、人間の脳は気がかりなこととして認識したうえで、脳の領域の一部を占拠しつづけます。それらが増えるとメモリスワップや、CPU負荷があがりすぎたりしてしまうのです。そのため、タスクは完了をすべきです。

それでは、タスクを完了するためにはどうすればいいでしょうか？

根性で終わらせるというのは、場合によっては有効ですが、常用するとブラック労働、精神を病むのコンボまっしぐらです。

隠れた要件をあぶり出す、ゴールを見直す、あるいは、そもそもタスク分割自体に誤りが無いか考えるというのはいい考えです。

根性で間違ったタスクに合わせるのではなく、作業しやすいように正しくタスク定義をするのです。

ここで必要なことはそのタスク定義が正しかったかどうかのふりかえりです。ふりかえりの数だけ、タスク定義は上達します。

====[/column]

== タスクを完了したあとに
=== 完了したことを伝える

タスクを遂行したら、やりっぱなしというわけにはいきません。上司やチームメンバーは、あなたやチームの持つ、どのタスクが完了したのかに関心を持っています。上司に報告する、チケットを完了にするなど、何かしら上司からの指示やチームの取り決めによりやるべきことがあるでしょう。日報を求められる場合もあるかもしれません。

=== ふりかえりをする

タスクを漫然と行うだけでは、なかなか見積もりはうまくなりません。見積もりの精度を向上させるために、振り返りを行いましょう。振り返りは、自身の仕事のやりかたを見つめなおすことで、今後の活動を改善する未来志向の活動です。

振り返りの中では、見積もった時間と、実際にかかった時間を見比べてみましょう。時間は雑なものではなく、なるべく時計を見ながら測った実時間を利用します。作業を開始してから終了するまでにかかった時間（リードタイム）と、実際の作業をしていた時間（プロセスタイム）を出してみると、より具体的な振り返りができます。

もし、想定よりもプロセスタイムが長かったのであれば、次回以降の似たようなタスクを見積もる際には時間を長めに修正しましょう。逆に、想定よりもプロセスタイムが短ければ、見積もりを短めに修正します。また、見積もりを修正するだけでなく、次回以降のタスクの実施時にプロセスタイムをより減らせるよう、仕事の進め方をもっとうまくやるための方法を考えてみましょう。

プロセスタイムとリードタイムに大きな乖離がある場合は、並行作業をしていてコンテキストスイッチが頻繁に発生していたり、割り込みが多いことが原因の１つとして考えられます。１つの作業に集中できる環境を整えられるよう、仕事の方法を改善してみましょう。

また、コラムにも書いたとおり、タスク定義が正しかったかも振り返りましょう。この振り返りには、所感を記録しておくとより効果的な改善ができるようになります。タスク定義時に考えていたこと・感じたことと、タスク完了時に感じたことにどのようなギャップがあったのか？そのタスクはやってみてどうだったか？無駄は無かったか？どういうところでハマったか？こうした内容を振り返り、次に活かしていきましょう。場合によっては仕事の方法の改善だけに留まらず、仕組み化やシステム化をすることで、より大幅な効率化が見込めるでしょう。

なお、そのほかにどんな情報を振り返るとよいかは、「第4章 2点見積もりと振り返りのススメ」にも記載があります。併せてお読みいただくことで、理解がより深まるでしょう。

=== アウトプットする（言う・書く）

言葉・文字としてアウトプットする（言う・書く）ことは、振り返りにおける重要なファクターです。頭の中だけで作業の内容や感想を思い浮かべただけでは、すぐに霧散してしまいます。言葉・文字にすることで、自分の頭の中で点在していたものが線・面と繋がっていき、理解を深める手助けをしてくれます。この中で、自分が思っていたよりも理解できていなかった、ということに気付けるかもしれません。

また、書き出すことで、見えていなかった情報が見えてくることもあります。自分が思っていたよりもはるかに作業時間がかかっていたり、見積もりにバッファを積みすぎていたり、割り込み作業が多かったり、ということに気付けます。情報を書き出し、自身の活動を客観視してみると、きっと新しい発見があるはずです。

このように、アウトプットはとても大切です。「理解したと思っていること」は、あなたが希にみる天才でも無い限り、「わかったつもりになっている」だけに過ぎません。まずは、自分の頭の中で考えていること言葉にしてみたり、付箋やメモ帳、テキストエディタなどで文字に書き出してみましょう。不慣れであれば箇条書きや、砕けた話し言葉でも構いません。それが、確実にあなたの力になります。

=== 自身の仕事を評価する

評価制度のある会社なら、振り返りの蓄積はとても強い武器になります。振り返りをしていれば、「今期は何をして、どこが成長したか？どのように貢献したか？」という問いに自信を持って答えることができます。逆に、振り返りが疎かになっていると、こうした評価に直結する問いに応えるのは難しいでしょう。

上司はあなたのすべてを見てくれているわけではありません。上司はチームメンバー全員を見なければならず、全員のことを完全に把握するには時間が足りません。チームメンバーの評価を提出しなければいけない立場であり、あなたの成長や貢献は、あなたの言葉を信じています。適切なアピールができなければ、あなたの仕事は評価されずに終わってしまうでしょう。

=== どのタイミングでこれらのことをやるか

タスクの作業時間にもよりますが、なるべくタスクの完了直後に、やったことを覚えてるうちにアウトプットをし、振り返りをしましょう。振り返りには、脳を整理して、脳を休ませ、次のタスクに備える効果もあります。もし、細かく振り返りすることが苦手なのであれば、タスクの報告やチケットの操作だけしておいて、細かい情報の書き出しは後回しにするという手もあります。短い時間で終わるタスクであれば、いくつかまとめて、振り返りをするのもよいでしょう。

なお、出来れば1日、最低でも1週間に一度は振り返りをするように習慣づけましょう。人によって、やりやすい振り返りの進め方・サイクルは異なります。自分にとって効率のよい、脳の負荷が少ないやりかたを模索し、振り返りを自身の力にしていき、見積もりや仕事の効率を上げていきましょう。
