= タスク見積もり

//flushright{
@erukiti

森一樹@viva_tweet_x
//}

仕事をする時、社会人が最初に覚えなければいけないことは、おそらく自分のタスクを見積もる術でしょう。ほとんどの社会人は、タスクから逃れられません。

そこでまずはタスク見積もりの基本をおさらいしてみましょう。

== タスクとは？

まず、何かしらの命題があります。エンジニアでいえば新しいサービスを立ち上げて収益を得る、社内システムの改善をする、顧客にとって人件費がかかっている作業をシステム化するためのシステムを開発するなど、さまざまです。フリーランスでいえば、イラストを描く、小説を書く、ウェブサイトを作成する、環境整備と指導をする、技術記事を書くなど色々あるでしょう。

だいたいの場合において、命題というのは大きな単位であり、複数の作業の集合体です。人間は大きな単位、いいかえると雑な認識をしたままでは、仕事を進めることはできません。その大きな単位を、現実的な作業単位に分解する必要があります@<fn>{feeling-task-breakdown}。
//footnote[feeling-task-breakdown][人によっては天性の才能とか直感で、無意識のうちにやってるケースもあるでしょう。そういう働き方もありかもしれませんが、世の中の99%の人は、それでは行き詰まります。]

命題の分解には、さまざまな粒度が考えられます。アジャイル界隈でよく使われるのが、「ストーリー」という単位です。たとえば「ユーザーがログインする」ということに関わる一連の動作が、ひとつのストーリーになります。ただし、ストーリーでも作業単位としてはまだまだ大きいのです。

他のプロジェクト管理の方法では、また違った粒度で管理しているでしょう。これは会社、チームなどによって色々な流儀があります。

しかし、どういうところでも必ず必要になるのが、「タスク」という単位です。まずは大きな単位をタスクに分解することを身につける必要があります。

=== タスク単位に分割する理由

理由はいくつもあります。

 : 報告・連絡・相談

まずは、上司やチームメンバーに報告するためです。

メンバーが今何をやっていて、どれくらいで終わって次のタスクに取りかかれるかというのは、上司なりチームメンバーなりにとって、把握しておきたいことです@<fn>{task-dependency}。
//footnote[task-dependency][タスクAが完了しないと手をつけられないタスクBのように依存関係がある場合は特にそうです。手が空いた人にやってもらいたいことというのもあるでしょう。そういったチームでの事情です。]

タスクにまだ慣れていない人であれば、タスクの進行状況というのは、センサーになります。うまくいってるのか？それともうまくいってないのか？早めに状況を知り、必要であれば助けをだすことがチームにとって必要です。

また当人としても、周囲に対してできる限り早めにタスクの状況を伝えるべきです。早めの報告、早めの相談、早めの連絡が大切です。

 : タスクの見落としを防ぐため

大きな単位、プロジェクトやストーリーなどを実現するときに必要な作業のすべては、実際にタスクに分割することで見えてきます。場合によっては、タスク分割しても全貌がはっきりしないケースも普通にあります。

これをサボると、必要な工程を見落とすことが多々あります。実は隣のチームと連携しなければいけなくて、それには2週間かかるのに、リリースは1週間後……みたいなホラーを体験したくはないですよね？@<fn>{task-horror}

//footnote[task-horror][自チームだけではなく、連携相手にもめちゃくちゃ迷惑かけるし、連携先には実は他にさらに話を通さなければならない相手がいるかもしれません。こういう状況はホラーとしか言いようがありません。]

細かい単位に落とし込むと、どれを先にやらないと後が詰まるか、いわゆるボトルネックなども見えてきます。

 : 考えやすい単位にすることで作業しやすくする

タスクに分解するのを何回もこなしてくると、大体パターンが見えてくるでしょう。パターンが見えてくれば、以前やったタスクと同じタスクや似たタスクがあるでしょう。そんなパターンは、今後も出てくる可能性が高いのではないでしょうか？

手順書を作る、コツをまとめておく、スクリプトを作成して自動化するなど、作業を楽にするための術を身につけないと、いつまでも面倒な繰り返しを延々続けることになります。

=== どうタスク分割をするのか？

上司やチームメンバーが把握したい粒度というのはあります。まずは彼らが求めている粒度で分割してみましょう。

自分が担当しているタスクの分割の仕方がよくわからない場合は、他のチームメンバーを参考にするとよいでしょう。チケットシステムのようにチームメンバーの稼働を参照できるなら、タスク管理の方法を見て、参考にしましょう。

ただし、他のメンバーの粒度は不適切な可能性もあります。細かすぎる場合は報告などのオーバーヘッドが増えますし、大雑把すぎると長いタスクになって作業しづらいもの@<fn>{bigtask}になります。

//footnote[bigtask][筆者の感覚として、ひとつのタスクは30分〜2時間程度で終わるべきだと思っています。]

チームとして、あまり細かいタスクには興味がないというケースももちろんあるでしょう。いちいち細かく指示を出すというのは、上司にとって負荷の高いものです。
//footnote[micro-management][いわゆるマイクロマネージメントです。]

その場合、タスクをさらにサブタスクやTODOリストに分割するという方法があります。サブタスクは共有してもいいですし、自分だけで保持してもいいでしょう。このあたりはチームで実践している方法にある程度依存します。チケット方式のタスク管理をしている場合は、タスク管理システム自体にサブタスクやTODOリスト機能が付いている可能性が高いでしょう。

どうやってもやりにくい、効率が悪いと感じるのであれば上司やチームリーダーに相談しましょう@<fn>{angry-boss}。タスク管理についてアドバイスをもらえるかもしれませんし、粒度に関して見直しを考える必要がある可能性もあります。
//footnote[angry-boss][相談すると怒られる、できそうにないという場合は、会社内部で異動できそうなら異動を考える、そもそも会社全体がそういう風潮であれば、転職という選択肢も考えられるかもしれませんね。]

=== タスクの定義に必要なもの

まず、前提条件の確認が必須です。

期日が決まっていれば、もちろんそれは前提条件です。

また、要件とされているものの確認はとても重要ですが、提示された要件が適切かどうかを確認しなければいけないケースも、もちろんあります。

大体において、依頼主（上司や別チームや顧客、あるいは一人開発なら自分自身かもしれません）には思惑があります。得てしてそれは、隠れた前提条件となります。また、彼らが気づいてない要件もあるかもしれません。

これらの前提をすっ飛すと、ちゃぶ台をひっくり返されたり、はしごを外されたり、信用を失ったり、仕事を失ったりします。

何をすればタスクが完了なのか、ゴールを決めることも大切です。ゴールのないタスクは延々と終わらなかったり、不完全になったり色々します。場合によっては、ゴールについて誰かと相談する必要があるかもしれません。ここでいう「誰か」とは、チームの同僚、上司、顧客、などです。これらをまとめてステークホルダーと呼ぶこともあります。依頼主と一致する場合もありますが、異なる場合もあります。

定義したタスクが順調に進むかという判定基準もあるとよいでしょう。基準はいろいろあります。「実際にコードを書いてみて動かしたが、実行速度の問題がある」「15分くらい手が止まってしまった」「2時間で機能の実装が完了しなかった」などです。その判定に引っかかった場合は、やり方を間違えているか、必要な何かが欠けているか、そもそもタスクの前提や定義や粒度が間違っていないかなどを考え直すべきです。

具体的なアクションを書き出すというのも、有効なテクニックです。「VSCodeを立ち上げて、○○のファイルを開く」というようなアクションは、タスクを開始する時にとても役に立ちます。

なぜなら、人間の脳は実際にアクションを起こさないと「やる気」を起こす物質を分泌してくれないからです。実際に実行できるアクションを書き出し、それを実行することで、やる気エンジンが回り出すのです。これは特に朝一に有効です。

ですので、朝一はアクションリストの作成や実際にアクションを起こしてエンジンを回しましょう。ウェブブラウジングを朝にやってしまうと、その日一日中集中力が途切れがちになるかもしれません。

他にも、タスク定義の時点で、所感を書いておくというのもよいでしょう。これはあとあとになって響いてきます。

== タスクの時間見積もり

タスクが定義できたところで、いよいよ本書のテーマである見積もりをしましょう。最初は大雑把でも、慣れてくれば少しずつ精度が上がるはずです。

このとき、上司や同僚、会社の文化によって、見積もりの方法は変わってきます。具体的にはバッファを取るかどうかです。

バッファというのは、思ったよりも作業時間がかかりそうなときのための緩衝材です。30分で終わる作業を1時間と見積もったり、3時間の作業を4.5時間としたり、場合によっては2時間の作業を6時間にするということもあるでしょう。

バッファが必要な理由は、タスクの見積もりが甘い可能性があるというだけではありません。会社で働いている限りは、他の誰かによる割り込みの発生は避けることができません。

せっかく作業がはかどっているときに、おしゃべりな同僚が話しかけに来る場合もあるかもしれませんし、コンピュータコミュニケーションに不慣れな人が「すいません、今いいですか？」だけの発言を投げつけてくるケース@<fn>{hello-problem}もあるでしょうし、いきなり会議に呼ばれる、会社行事に巻き込まれる、誰かの相談を受ける、おなかが痛くなる、眠いなど、発生する可能性がある割込みは無数にあります。

//footnote[hello-problem][チャット、DMなどで「今いいですか？」とだけ聞くと、相手にとって判断できる情報量がありませんね。こういうチャットを投げると相手（特にエンジニア）からは迷惑がられます。]

根本的な割り込み対策ができるならそれをした方がいいかもしれません。たとえば作業中は、緊急以外の通知が飛ばなくする、TwitterやSlackなどのウィンドウを最小化する、あるいはもう閉じてしまう。今集中してます表示をさりげなく出せる方法を考えるなど。

見積もりや時間計測で、割り込みをどう判断するかは、流儀によるでしょう。たまたま、希な割り込みがあったのかもしれませんし、割り込みが常態化しているかもしれません。純粋な作業時間は、ある意味理論上の時間といえるかもしれません。

バッファをまったく設けず、いつも見積もりオーバーをしていると信用をなくすでしょう。しかし、バッファを設けすぎると、夏休み宿題症候群@<fn>{summer-homework}を発症してしまうかもしれませんし、上司や同僚に「おまえバッファ取り過ぎてるだろ」と指摘されたり、直接指摘されなくてもそう評価されてしまう可能性もあります。

//footnote[summer-homework][40日間という長い期間があるんだから、宿題はラストスパートでいいやとなってしまう奴です。期限が長いと、それに引きずられてダラダラ効率悪く働いてしまうということもあります。]

見積もりにおいてバッファをどう取るかは、これまた経験を積まないと適切なものが見えてこない類いのものかもしれません。

====[column] 完了

「手動でテストする行程が残ってるけど、コードを実装した」という段階では、タスクは完了ですか？違いますよね。
完了とは、タスクとして定義したものをすべてこなすことです。正確にいうと、前提条件をすべて満たすことです。
「手動でテストしてあぶり出せる範囲のバグを取ること」というのは、前提条件として忘れていたのかもしれません。

いつまでも完了しないタスクがあると、人間の脳は気がかりなこととして認識したうえで、脳の領域の一部を占拠しつづけます。それらが増えると、人間の脳もメモリスワップやCPU負荷があがりすぎるなどの障害を起こしてしまうのです。そのため、タスクは完了をすべきです。

それでは、タスクを完了するためにはどうすればいいでしょうか？
「根性で終わらせる」というのは場合によっては有効ですが、常用するとブラック労働、精神を病むというコンボまっしぐらです。
隠れた要件をあぶり出す、ゴールを見直す、あるいは、そもそもタスク分割自体に誤りが無いか考えるというのはいい考えです。
根性で間違ったタスクに自分を合わせるのではなく、作業しやすいように正しくタスク定義をするのです。

ここで必要なことはそのタスク定義が正しかったかどうかのふりかえりです。ふりかえりの数だけ、タスク定義は上達します。

====[/column]

== タスクを完了したあとに
=== 完了したことを伝える

タスクを遂行したら、やりっぱなしというわけにはいきません。上司やチームメンバーは、あなたやチームの持つどのタスクが完了したのかに関心を持っています。上司に報告する、チケットを完了にするなど、何かしら上司からの指示やチームの取り決めにより、取るべき行動があるでしょう。日報を求められる場合もあるかもしれません。

=== ふりかえりをする

タスクを漫然と行うだけでは、なかなか見積もりはうまくなりません。見積もりの精度を向上させるために、ふりかえりを行いましょう。ふりかえりは、自身の仕事のやりかたを見つめなおすことで、今後の活動を改善する未来志向の活動です。

ふりかえりの中では、見積もった時間と、実際にかかった時間を見比べてみましょう。時間は大雑把なものではなく、なるべく時計を見ながら測った実時間を使います。作業を開始してから終了するまでにかかった時間（リードタイム）と、実際の作業をしていた時間（プロセスタイム）を出してみると、より具体的なふりかえりができます。

もし、想定よりもプロセスタイムが長かったのであれば、次回以降の似たようなタスクを見積もる際には時間を長めに修正しましょう。逆に、想定よりもプロセスタイムが短ければ、見積もりを短めに修正します。また、見積もりを修正するだけでなく、次回以降のタスクの実施時にプロセスタイムをより減らせるよう、仕事をもっとうまく進めるための方法を考えてみましょう。

プロセスタイムとリードタイムに大きな乖離がある場合は、並行作業をしていてコンテキストスイッチが頻繁に発生していたり、割り込みが多いことが原因のひとつとして考えられます。ひとつの作業に集中できる環境を整えられるよう、仕事の方法を改善してみましょう。

また、コラムにも書いたとおり、タスク定義が正しかったかどうかもふりかえりましょう。このふりかえりには、所感を記録しておくとより効果的な改善ができるようになります。「タスク定義時に考えていたこと・感じたこと、タスク完了時に感じたことにどのようなギャップがあったのか」「そのタスクはやってみてどうだったか、無駄は無かったか」「どういうところでハマったか」などをふりかえり、次に活かしていきましょう。場合によっては仕事の方法の改善だけに留まらず、仕組み化やシステム化をすることで、より大幅な効率化が見込めるでしょう。

なお、そのほかにどんな情報をふりかえるとよいかは、「第4章 2点見積もりとふりかえりのススメ」にも記載があります。併せてお読みいただくことで、理解がより深まるでしょう。

=== アウトプットする（言う・書く）

言葉・文字としてアウトプットする（言う・書く）ことは、ふりかえりにおける重要なファクターです。頭の中だけで作業の内容や感想を思い浮かべただけでは、すぐに記憶から消えてしまいます。言葉や文字にすることで、自分の頭の中でばらばらに存在していたものが線や面として繋がっていき、理解を深める手助けをしてくれます。この中で、「自分が思っていたよりも理解できていなかった」ということに気付けるかもしれません。

また、書き出すことで、見えていなかった情報が見えてくることもあります。自分が思っていたよりもはるかに作業時間がかかっていたり、見積もりにバッファを積みすぎていたり、割り込み作業が多かったり、ということに気付くことができます。情報を書き出し、自身の活動を客観視してみると、きっと新しい発見があるはずです。

このように、アウトプットはとても大切です。「理解したと思っていること」は、あなたが希にみる天才でも無い限り、「わかったつもりになっているだけ」に過ぎません。まずは、自分の頭の中で考えていること言葉にしてみたり、付箋やメモ帳、テキストエディタなどで文字に書き出してみましょう。不慣れであれば箇条書きや、くだけた話し言葉でも構いません。それが、確実にあなたの力になります。

=== 自身の仕事を評価する

評価制度のある会社なら、ふりかえりの蓄積はとても強い武器になります。ふりかえりをしていれば、「今期は何をして、どこが成長したか？どのように貢献したか？」という問いに自信を持って答えることができます。逆に、ふりかえりが疎かになっていると、こうした評価に直結する問いに応えるのは難しいでしょう。

上司はあなたのすべてを見てくれているわけではありません。上司はチームメンバー全員を見なければならず、全員のことを完全に把握するには時間が足りません。チームメンバーの評価を提出しなければいけない立場であり、あなたの成長や貢献は、あなた自身の言葉を信じています。適切なアピールができなければ、あなたの仕事は評価されずに終わってしまうでしょう。

=== どのタイミングでこれらのことをやるか

タスクの作業時間にもよりますが、タスクの完了直後がベストです。やったことを覚えてるうちにアウトプットをし、ふりかえりをしましょう。ふりかえりには、脳を整理して、脳を休ませ、次のタスクに備える効果もあります。もし、細かくふりかえりすることが苦手なのであれば、タスクの報告やチケットの操作だけしておいて、細かい情報の書き出しは後回しにするという手もあります。短い時間で終わるタスクであれば、いくつかまとめて、ふりかえりをするのもよいでしょう。

なお、できれば1日、最低でも1週間に一度はふりかえりをするように習慣づけましょう。人によって、やりやすいふりかえりの進め方・サイクルは異なります。自分にとって効率のよい、脳の負荷が少ないやりかたを模索し、ふりかえりを自身の力にしていき、見積もりや仕事の効率を上げていきましょう。
