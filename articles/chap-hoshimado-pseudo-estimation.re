= 守備範囲外の開発の見積もり
#@# ◆付録へ移動、も検討中◆
//flushright{
ほしまど＠hoshimado7
//}

よく知らないソフトウェア開発の工数見積もりを任された時には、どうすればいいでしょうか？

自分が詳しくない、もしくは経験のない開発について工数の見積もりは、分析や検討のしようがありません@<fn>{expert-is-assigned-plan-not-amateur}。
したがって、「エイヤッ」で適当に決めるしかありません。
しかし、検討できる範囲は検討したいものです。
本章では、過去の類似開発の成果物（ソースコード）と総工数実績の報告書だけをもって、それっぽく工数見積もりをやっつける方法を説明します。
なおソースコードは、「実装部分をおおよそ見つける程度には読める」とします（読めなかった場合は、読める人にお願いしましょう）。

//footnote[expert-is-assigned-plan-not-amateur][本来は、その開発内容に詳しい人が「見積り」をすべきですし、そういう人でなければ妥当な「見積もり」はできないでしょう。しかし、そうでない人が「大雑把でよいから見積もって」と言われることもあるものです。]

== よく知らない開発の工数見積もりを任された時には？

たとえば、次のようなソフトウェア開発要件の工数見積もりを任されたととします。

 * 環境Aと環境Bと環境Cを判別する
 * 環境毎にドライバーを適用する

環境A、環境B、環境Cがそれぞれどういうもので、どうやって判別するのか、ドライバーを適用とはどのように行うの、かをあなたは良く知らないとします。

過去の開発実績報告を探して、似たような要件の開発について次のような記録を拾上げられたと仮定します。

 * 成果物としてのソースコード
 * 完了報告書。ただし、開発に掛かった「総工数の実績」の記載はあるが、要件毎の記載は無し。

この状態から要件ごとの開発工数を見積もるには、過去の開発実績での要件ごとのソースコードのライン数をキーとして工数を算出します。そのために先ずはソースコードを大雑把に追って、今回の開発要件と似たような内容を実装しているソースコードの個所を特定します。
開発元に問い合わせできる場合は、要件ごとに該当するソースコードの個所を教えてもらいましょう。
「要件別の実績値を正式な報告書にして提出して」と依頼するのは難しいかもしれませんが、ソースコードの該当場所くらいであれば、応答してくれやすいでしょう。
過去の開発実績での「要件」とそれに関連すると思われるソースコードのライン数を拾い上げます。
大雑把でいいです。詳しくない物を出来る範囲で凡そ見積もるのが目的なので、目安が分かれば十分です。

== 過去の開発でのライン数を推定し、見積もりの根拠にする

例えば、過去の開発実績で「環境Zと環境Yを判別する」「環境ごとに、ドライバーを適用する」があった場合は、拾い上げた成果物のソースコードからそれぞれの要件を満たす機能の実装部分を
@<list>{product-code}
のように見つけ出します。
そのソースコードのライン数を
@<table>{table-lines}
のように要件ごとに書き出します。

//list[product-code][過去の成果物のソースコード]{
    getSystemInfo( smbios );
    getDeviceInfo( device );
    /* ・・・中略・・・ */
    if( hoge==fuga ){
        type = SYSTEM_Z
    }
    /* ・・・中略・・・ */
    // ↑ここまでが、「環境ZとYを判別するコード」だろう。
    switch( type ){
        case SYSTEM_Z:
            applyZzzDriver(); 
            // この呼び出し先が「ドライバーZを適用するコード」だろう。
        /* ・・・中略・・・ */
    }
//}

//table[table-lines][過去の実績から、規模を拾う]{  
名称	規模（コードライン数:KL）
--------------------------------------------  
環境ZとYを判別する	0.5	
対応するドライバーを適用する	0.3
A対応、B対応、、その他	2.2
合計	3.0
//}

#@# 45ｈ調査
#@# 50ｈコーディング
#@# 60ｈ設計
#@# 10パターン×６のFT、準備含めて４パターン／ｈ　60/4=15ｈ
#@# 10パターンの全体テスト、準備含めて1パターンに１ｈとして、10ｈ
#@# 45+50+60+15+10=180

過去の開発実績の総工数が「180人Ｈ」
@<fn>{person-hour}
だったとします。
総工数「180人Ｈ」の内訳は「先行調査、設計、コーディング、機能評価、システム評価」等とあるわけですが、その比率は無視して要件ごとの工数を、ソースコードのライン数で単純に割り振ります。

//footnote[person-hour][「人時（にんじ）」などと呼ばれる工数の単位。「人Ｈ＝１人×１Hour」の表現であり、「1人でやると１時間の作業時間を要する」ことを意味する。より大きな単位に「人月」（１人月＝160人Ｈ）がある。一般的には1日の作業時間を8時間、1カ月の営業日を20日間として換算する。]

//table[table-man-hours][過去の実績での、要件当たりの工数を推定する]{  
名称	規模（コードライン数:KL）	規模の比率	工数（人H）
--------------------------------------------  
環境ZとYを判別する	0.5	0.167	0.167*180=30.06
対応するドライバーを適用する	0.3	0.1	0.1*180=18
A対応、B対応、、その他	0.2	0.733	.
//}

すると
@<table>{table-man-hours}
のように過去の開発実績における「要件ごとの工数」を推定することができます。
あとは、前回と今回の差分（この例であれば「判別する環境の数が1.5倍である」こと）を考慮して次のように算出します。

//table[table-pseudo-estimation][それっぽい見積り結果]{  
名称	規模(KL)	工数(人H)
--------------------------------------------  
環境A,b,Cを判別する	0.5*1.5=0.75	30*1.5=45
対応するドライバーを適用する	0.3*1.5=0.45	18*1.5=27
合計	1.2	72
//}

コードのライン数で必要工数を見積もるのは「あまり良くない」と、一般に言われます。
しかし「開発の内容を良く知らない」状態では、開発の内容の詳細化やそれぞれの難易度を適切に推しはかることは困難です。
そんな場合でも「過去のライン数の実績に当てはめて見積もる」くらいならば出来ます。
「エイヤッ」でテキトーに決めるにしても、過去の開発における「ライン数」の実績値を足掛かりにするほうが、無いよりは幾分はマシでしょう。

以上で、開発の中身を良く知らない場合でも、それっぽい「工数見積もり：72人Ｈ」を出すことが出来ました。


