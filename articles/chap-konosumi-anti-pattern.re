= 過⼩⾒積もりで炎上するプロジェクトから得られた学びと実践

//flushright{
このすみ
//}

このすみと申します。本書（見積もり合同誌）は、技術書典5で私が頒布したエンジニアアンチパターン@<fn>{エンジニアアンチパターン}と、おやかた.am@<fn>{おやかた.am}がきっかけで誕生しました。

//footnote[エンジニアアンチパターン][エンジニアアンチパターンNEXT　BOOTH　@<href>{https://booth.pm/ja/items/1025135}]
//footnote[おやかた.am][おやかた.am @<href>{https://anchor.fm/kane4}]

エンジニアアンチパターンには、リーダーとして経験した「過⼩⾒積もりで炎上するプロジェクト」という章があります。概要は以下の通りです。

== 概要：過⼩⾒積もりで炎上するプロジェクト

私の人生において最大の炎上が、スマートフォンアプリの開発案件です。当時の私の役割は、iPhoneアプリの開発リーダーでした。時代背景で言うと、Swiftが正式リリースされた頃の話になります。 

このスマートフォンアプリの開発プロジェクトは、当初の見積もりである3ヶ月半を大幅に超過し、途中でメンバーを増員したにも関わらず、最終的には半年近くかかっています。

結局、この年の私は、大晦日や年末年始を会社で過ごすことになります。身体は疲労困憊で、完全に失敗プロジェクトの典型例でした。

 : もう炎上は懲り懲りです

失敗の分析はエンジニアアンチパターンに書いてありますので、本誌をお読みいただければと思います。ただ、見積もりの失敗による炎上を経験した結果、私も色々と工夫を考えました。

いくつか実験をしてみたり、実践したことがあります。今回は、そういった取り組みをいくつか紹介していきます。

== どこまで仕様を削減することができるのか？

見積もりには、必ず見積もる対象があります。多くの場合は、タスク・機能・プロジェクトなどです。見積もりをしていて感じることは、プロジェクトの規模が大きくなるほど、見積もりは飛躍的に難しくなるということです。

 : どうしても削れないもの、それこそが仕様である

みずほ銀行のシステム移行を、正確に見積もれる人はいないでしょう。システムの規模が大きくなるほど、見積もりのブレ幅は大きくなります。

そこで私がまずやることは、見積もりではなく仕様の削減です。まずは、対戦相手を弱体化させることから始めます。

例えば管理画面であれば、工数のかかりそうな機能は、最初は手作業やエクセルなどのアナログ運用でもどうにかならないのかを模索します。

また、システムを運用に合わせると、細かいカスタマイズやチューニングが増えてしまい、大変になってしまいます。いっぽう、運用をシステムに合わせるアプローチであれば、システム側の開発のしやすさも考慮しながら、見積もりや設計を進めることができます。

 : フェーズによる分割

見積もりの対象を小さくするための工夫として、フェーズによる分割が挙げられます。つまり、最初は最小限の機能で開発（リリース）して、後から反応を見て機能を追加していきましょうというアプローチです。

フェーズ分割の良いところは、当初は最小限の機能の実装に注力できるところです。後続フェーズの見積もりは、可能な限り着手する段階になってから見積もりたいものです。また、後続フェーズの見積もりが必要な場合であっても、フェーズ終了毎に、後続フェーズの見積もりの微調整ができると望ましいです。

まだ見積もっていないフェーズの機能であれば、仕様変更があったとしても特に影響はありません。後続フェーズに着手するときに、改めて見積もりをすれば良いのです。

とにかく、@<b>{見積もりの対戦相手を小さくしたり、分割することが重要です}。まずは対戦相手を弱らせることから始めて、見積もりのリスクを低減させます。魔王を倒すときも、取り巻きを倒したり、闇の衣を外したりするのは基本ですよね。

== 見積もりの正確さは設計力で決まる

炎上を経験した私は、設計をとにかく重視することにしました。設計するためには、プロジェクトを深掘りしなけらばなりません。

まずはプロジェクトを必要な機能で分割し、そこから更にタスクへと細分化していきます。その後にタスク毎の工数見積もりへと進んでいくわけですが、その間に設計が入ります。

スクラム開発では、スプリント計画（スプリントプランニング）がもっとも重要であるとも言われています。スプリントが一週間であれば、プランニングに2日間をかけて、2日で実装、最終日にリリースということもあるくらいです。

事前のプランニング（つまり設計）がきっちり出来ていれば、後はそれをコードに落としこむだけですので、スムーズに開発が進みます。それくらい設計というのは重要で、見積もりは設計によって決まるといっても過言ではありません。

 : タスクを深掘りする

工数の見積もりとは、いわば作業量の見積もりです。タスク毎に「何をやるから何時間かかる」と見積もっていき、それを積み重ねたものが全体見積もりになります。

タスクを深掘りする、つまり設計です。この設計には、タスクの見積もりの他にも、懸念点や不足事項の洗い出しといった目的があります。

例えば、とある機能（タスク）を見積もりする場合、必要なDBカラムやSQLレベルの設計まで深掘っておけば、「この機能はSQLの負荷が高そうだ」とか「レスポンス速度が問題になりそうだ」という懸念点が事前に分かります。

 : 設計書の見た目にはこだわらない

私の場合、設計はほとんどテキストや箇条書きレベルです。体裁を整えたり、見栄えをキレイにといったことを考え始めると、設計にはとても時間がかかります。

目的は見積もり、およびタスク毎に必要な作業の把握と洗い出しにあります。プロジェクト管理やタスク管理ツールのタスク概要の項目に、ひたすら書いていくイメージです。

== 設計を発表しながら見積もりをするプランニングポーカー

とあるプロジェクトで、プランニングポーカーを試してみました。プランニングポーカーでは、参加者のそれぞれに工数の書かれたカードが配られます。

私の場合、プランニングポーカーは以下の流れで進めました。

 1. 始めに、タスクの概要を説明します
 2. 次に、タスクの設計者が設計を読み上げます
 3. 設計に疑問点があれば、その場で質疑応答をします
 4. 疑問点が解消されたら、参加者全員が一斉にカードを出します
 5. 大きく乖離した工数を出した人がいたら、その人に対して理由のヒアリングを行ないます
 6. 理由を踏まえて、再度全員でカードを出します。
 7. ある程度の工数に収束したら、そこで工数を決定します

 これをタスク毎に繰り返していくことで、ボトムアップ方式で全体の工数を決定します。プランニングポーカーには、単純な見積もり以外にも、いくつか目的があります。

 : タスクを説明することによる、認識の共有

タスクの概要を、プロジェクトメンバー全員に共有することにより、認識のずれによる実装ミスを予防することができます。

 : 全員の叡智の結集による、懸念点や疑問点の解消

設計を全員に共有することによって、事前に設計の抜けや疑問点を洗い出したり、解消することができます。

漏れが多いほど見積もりはブレるため、全員の時間を使ってでもやった方が良いです。人は完璧ではないため、目は多いほうが抜けが起きる可能性は下がります。

 : 納得した工数によるモチベーションの向上

プランニングポーカーなら、プロジェクトメンバー全員が見積もりに参加することになります。「こんな無茶な工数で……」というメンバーの愚痴もなくなります。なぜなら、自分も見積もりに参加した上で決めた工数だからです。

さらに、プロジェクトメンバーにはできるだけ早い段階からプロジェクトに携わってもらった方が、プロジェクトに対する貢献意欲が向上します。言われたモノを作るだけでは、流れ作業で終わってしまいます。

初期の見積もり段階からプロジェクトメンバーに関わってもらうことで、自分たちが作るプロジェクト感(帰属意識)を高めていきましょう！

== 2点見積もり法

他にも、2点見積もりを試してみました。2点見積もりの2点とは「順調に開発が進んだ場合の最小工数」と「万が一ハマった場合を考慮した最大工数」のことです。

@<b>{2点見積もりを実践してみて良かった点、失敗した点}@<fn>{2pointQiita}という記事を参考にしました。

//footnote[2pointQiita][@<href>{https://qiita.com/naoqoo2/items/e4fac9a8ba047a3881a3}]

2点見積もりの良いところは、心理的安全性が確保されることです。最小工数でタスクを終えることができなくても、最悪、最大工数までに終えることができれば問題はない……という、心のゆとりが生まれます。

最大工数を考えるということは、「このタスクにはこんなリスクがある」を考えることに繋がります。実際、タスク毎の工数超過は、考慮漏れや懸念点の発生によって起こることがほとんどです（あと、突然の仕様変更）。

また、2点見積もりの良いところは、バッファの算出がやりやすくなるところです。エンジニアアンチパターンにも、機械的な一律バッファによる失敗が書いてあります。

@<b>{バッファ（＝(最大工数 - 最小工数) / 2）}

これを起点にしてバッファを調整すれば、かなり妥当性のあるバッファが出来上がるのではないでしょうか。

== 見積もりその後のプロジェクト進行

せっかく適正な見積もりができたとしても、その後のプロジェクト進行が上手くいかなければ、プロジェクトは炎上します。見積もりは、プロジェクト運営において最初の一歩に過ぎません。

そこで重要になるのは、その後のプロジェクト進行における技術です。これには、kakakakakkuさんの「プロジェクトをリードする技術」がとても参考になります。

@<b>{プロジェクトをリードする技術}@<fn>{ProjectLeadtech}

//footnote[ProjectLeadtech][プロジェクトをリードする技術 @<href>{https://kakakakakku.hatenablog.com/entry/2018/04/23/223304}]

 : SHIROBAKで感じるプロジェクト進行の重要さ

アニメの「SHIROBAKO」では、アニメ制作の現場が描かれています。主人公である宮森あおい（みゃーもり）は、制作進行というポジションのため、スケジュールを管理しています。

「SHIROBAKO」で描かれているのは、まさに炎上プロジェクトの典型例です。私が経験した「過⼩⾒積もりで炎上するプロジェクト」にも、似たような側面がありました。つまり、実際は見積もり力に加えて、オンスケで進めるための技術や、スケジュールを挽回する技術も必要になってくるのです。職種で言いますと、リーダーやディレクターのような役職になります。

私は過去に「第一線のプロがホンネで教える 超実践的 Webディレクターの教科書」を読んだのですが、この本はなかなか面白かったです。

 : 第一線のプロがホンネで教える 超実践的 Webディレクターの教科書@<fn>{webDirector}

//footnote[webDirector][第一線のプロがホンネで教える 超実践的 Webディレクターの教科書 @<href>{https://www.amazon.co.jp/dp/B0148E90R2/}]

かなり実践的でして「鶴の一声による仕様変更にどう対処するのか？」といった内容まで書いてあります（驚）。

== まとめ：俺たちの戦いはこれからだ

この章をまとめると、以下に要約できます。

 * 見積もりの対象を、いかに小さく（=仕様を削減）できるかが重要です
 * 一度に全部を作り切る必要はありません。フェーズの分割などによって、まずは最小限の機能に注力しましょう
 * 見積もりの正確さは、設計力や設計の深掘りによって決まります
 * 見積もりを、ただの工数見積もりにしてしまうのは勿体無いです。メンバーとの仕様共有や、認識のずれを防ぐ場としても活用しましょう
 * 2点見積もりはバッファの算出に有効で、開発メンバーの心理的安全性にも寄与します
 * 見積もりは終わりではなく始まりです。その後のプロジェクト進行も重要です

エンジニアアンチパターンには、私の見積もり失敗談が書いてあります。私も日々、失敗を繰り返さないよう、試行錯誤をしつつやっております。俺たちの戦いはこれからですね！
