= 見積もりきれぬ所要時間

これはある移行案件を担当した一人のエンジニアの悲劇の話である。

== 移行の概要

AWS@<fn>{AWS}上に構築されたRDS@<fn>{RDS}のストレージ容量の増減を行った。対象となるRDSは運用環境と評価環境を合わせてほにゃらら@<fn>{ほにゃらら}台である。

//footnote[AWS][Amazon Web Services]
//footnote[RDS][Relational Database Service]
//footnote[ほにゃらら][お察しください]

== 作業の概要

ざっくりではあるが、本移行作業は以下の通りの式次第である。ここの手順の詳細については割愛する。

 1. 現用機のRDSへ負荷を与えないため、一時的なリードレプリカを作成する
 2. 作成した一時的なリードレプリカからデータをエクスポートする
 3. エクスポートしたデータをストレージ容量を調整した移行先RDSへインポートする
 4. 現用機と移行機でレプリケーションを行い切り替え作業当日までデータを一致させる
 5. 切り替え作業当日に、現用系と移行先を入れ替える

今回お伝えするのは失敗事例であり、上記作業のなかでも「2.」の所要時間に関する見積もりとその現実（結果）の話である。

== 見積もりのポイント

この作業での見積もりのポイントは以下となる。RDS、EC2ともに共通する内容となっている。

 * ストレージのIOPS数(PIOPSの設定値やストレージ容量)
 ** PIOPS@<fn>{PIOPS}が設定されていたり、ストレージ容量が1000GiB@<fn>{1000GiB}以上であれば見積もりやすい
 * EBS最適化オプションの有無
 ** インスタンスタイプによってはこのオプションが使用可能になる。ストレージアクセスと一般的な通信の経路が切り分けられる
 ** もしオプションが無いタイプであれば、ネットワークパフォーマンス（転送速度）とどれだけ通信量を減らせるかが鍵になる
 * vCPU数や動作周波数、メモリ容量
 ** いくら転送速度が速い環境であっても処理性能が足らないと遅くなる。特にRDSでは、メモリ不足で再起動が頻発してしまう。特に自動バックアップのタイミングで落ちることもある

これらのポイントを踏まえ、RDSのストレージに書き込まれているDB数やテーブル数、行数など、つまり使用済み容量から、おおよその出入力時間を見積もっていくことになる。合わせて、エクスポートしたデータを受け止める側の性能を鑑みて、見積もりを実施する。

//footnote[PIOPS][つよい。非常に「こうかはぜつだいだ」だが非常に高価]
//footnote[1000GiB][ストレージIOPSは 3IOPS/GiBで算出できる。3000IOPSに満たない場合は、バーストクレジットを使用して3000IOPSまで性能を一定期間跳ね上げる。枯渇したら算出した値（ベースライン）で動作]

== 見積もりの落とし穴

PIOPSといった特殊な設定や、容量によってIOPSのベース性能が変わってくるといったこと以外は、クラウドであろうがなかろうがそんなに変わりはしない。だからこそ、事前に分かっている数字と本番同様の手順検証の中で見積もりした数字にどれだけ近づくかをみていくことになる。

ただし、この手順検証が落とし穴になりかねないので注意が必要である。落とし穴の正体はファーストタッチペナルティという現象・動作仕様である。ファーストタッチペナルティとは何かを簡単にお伝えすると、ストレージをバックアップ（スナップショット）から復元すると発生する、一時的な現象である。ファーストタッチ、つまり初回アクセス時に性能劣化というペナルティが発生するのである。この性能劣化は通常時と比較すると数倍悪い@<fn>{数倍悪い}状態である。繰り返しになるが初回アクセス時の性能劣化のため、2回目以降は本来あるべき性能を発揮することになる。そのため、暖機運転的に全データ領域にアクセスを行う。ここでいう全データ領域とはデータベースでいえば各テーブルの全行がイメージしやすいと思う。ハードディスクでいえばアクセス対象となる全セクタをイメージしていただけたらわかりやすいだろう。

このことから、ファーストタッチペナルティとは上手く付き合わないと、データのエクスポートに要する時間が想定の何倍にもなってしまう。ファーストタッチペナルティが発生した状態と、鉛筆舐め舐めしてはじき出した見積もりとの乖離が酷い状態になってしまい、見積もりきれない状態になる。悲劇のエンジニアくんもファーストタッチペナルティと上手く付き合いきれず、この落とし穴にはまってしまった。

//footnote[数倍悪い][環境や性能にもよるので一概には言えないが、実測値でいえば3〜4倍程度]

== まとめ

そもそもクラウドは、スモールスタートで運用を始め、必要になったら後からリソースを追加することが簡単にできる。実際に、容量削減ではなく拡張であれば、数クリックで実行可能である。あとは自動的に最適化を行ってくれる。そのため、数年後を見越して最初から大容量にはせず、例えば1年半はもつ容量を設定したうえで1年ごとに見直しをかければよい。必要なら拡張すればよいし、伸び率から推測して次回の見直しタイミングをいつにすれば良いかを自ずと見積ることができるはずだ。@<br>{}

これ以上悲劇のエンジニアくんを増やさないためにも、SEの皆様方には拡張するまでのランニングコストを下げることができるので、スモールスタートを心がけていただけたら幸いである。もちろん、性能要件を満たすためといった事情がある場合は、その旨を適宜後工程に伝えていってほしい。

そして、悲劇のエンジニアくんのよう落とし穴にはまってしまわないように、言うまでもないが、前提となる作業や条件を徹底的に洗い出しておく。問題になる前に芽を全て刈り取り、見積もり精度がよ高くなるようにやっていくことが肝要である。