= コンシューマーゲームの見積もり（いにしえの記憶より）

//flushright{
さっぴー川原 ＠sapi_kawahara
//}

今もゲームソフトの発売が遅れることがありますが、昔のコンシューマーゲーム@<fn>{consumer}での開発では遅れることが当たり前です、そしていつしか@<b>{遅れることが常態化するゲーム開発の世界}と呼ばれるようになりました。
原因はさまざまですが、本稿はコンシューマゲームの見積もりに関してピックアップして書いていきたいと思います。
今回寄稿することにより、コンシューマーゲームの開発と構造的に似ているスタートアップ企業とを照らし合わせて、問題の早期発見、早期改善に注力できるように、アンチパターンとして、この話を読んでいただけたら幸いです。

//footnote[consumer][コンシューマーゲーム この寄稿では、ファミコンなど8ビットや16ビットコンシューマーゲーム機器で動作するアプリケーションを指します。]

== 遅れが常態化する原因

自分が経験したのは次の4つのケースです。

  1. 進まない見積もり。
  2. 途中で大幅に変更される見積もり。
  3. リセットされる見積もり。
  4. 有名人を企画者にしたときの見積もり。

 : 進まない見積もり
企画者が企画する物を出さないので@<b>{見積もりが作成できないケース}です。
ゲーム制作において世界観を決定付けるためには、プロット@<fn>{プロット}を作成することが重要です。このプロットを作ることにより、ゲームストーリーの他にデザインや音楽、プログラミングにも関わるゲームシステム@<fn>{ゲームシステム}がここで決定されます。

このプロットの作成が遅れることで、全体の進捗に影響がでます、各パーツの作業が進まずゲーム制作が遅れていきますが、それよりも深刻なことに「プロットが作られていないこと」があります。@<b>{企画者がプロットというのを理解していないまま}、ストーリー@<fn>{ストーリー}を作成していることが非常に多いのです。プロットとストーリーは似て非なるものです（違いについては次のコラムにて記載します）。

ゲームの規模が大きくなれば大きくなるほど、企画者がストーリーを記載する量が増えていきますし、作業時間も増大します。そのため、ゲームの全体像が見えるものができ上がってきません、ゲームシステムを作るためにはゲームの全体像が必要なのですが、それがいつまで経っても出てこないのです。
ある程度完成したストーリーからゲームシステムを作ることは可能ですが、不確定要素はストーリーの後半にあることが多いので、エンジニアとしては全体像としての@<b>{全ての要素が記載されたプロットを望みます}。

企画者はプロットの役割を理解せずにストーリーを淡々と作成し、ゲームの全体像が見えないまま最終的な見積もりが作成できず、そしていつしか発売日だけが決定してデスマーチがはじまります。

//footnote[プロット][プロットとは、ゲームを作るときに最初に作成されるストーリーの基本設計です。詳細については次のコラムにて記載します。]
//footnote[ゲームシステム][ここでいうゲームシステムとは、ゲーム全体に関わる要素、ロールプレイングゲームならドラクエ式なのかFF式なのか、戦闘方式はコマンド式なのかリアルタイム式なのか、それらをまとめたものです。]
//footnote[ストーリー][ストーリーとは、ゲームにおける全ての内容です、プロットから肉付けされたものがストーリーとなります。詳細については次のコラムにて記載します。]

===[column] プロットとストーリーの関係性について

//image[kawahara_Flowchart1][プロットの説明][scale=0.75]{
//}

プロットはゲームの骨格になるものです。いわばゲームの基本設計です。@<br>{}
まずプロットを作成し、そこからストーリーを肉付けしていきます。
プロットを構成する要素には、まずスタートとエンドがあり、その間にイベントがあります。その間をつなぐものが、分岐要素・合流要素・繰返し要素（複数イベントをまたぐ繰返し要素を含む）です。@<br>{}
プログラムの実装は、プロットを元に行っていきます。

一見プロットに似ているものに「あらすじ」がありますが、あらすじは一般の読者のためにストーリーを要約したものです。

//image[kawahara_Flowchart2][ストーリーの説明][scale=0.75]{
//}

ストーリーは、プロットでは書かれていないイベントの詳細やサブイベントなどを追加したゲーム全体の内容です。ゲームの詳細設計にあたります。@<br>{}
ストーリーを作成することにより、ゲーム全体の世界観や最終的な工数が見えてきます。ストーリーを作成しているときには、プログラムの実装に入っており、プログラマー側から企画者にフィードバックすることもあります。

プログラムの作成に入っているということは、ここでは大きな変更はできないことを意味します。ストーリー作成中にプロットとは違うことをする、たえばイベント間のつながりを変更することは、プログラムの変更を意味するため、見積もりが大幅に変わります。同時に、工数も増えます。

===[/column]


 : 途中で大幅に変更される見積もり
ゲームが実際に動いているのを見て、企画者が新たな企画を考えつき、見積もりが変わります。このケースは多く見受けられ、コンシューマーゲームの開発が遅れる原因の大半がこちらになります。
プロットから大きく外れないなど少しの修正ならば見積もりが変わるほどではありませんが、大抵はプロットから大きく外れた要求をしてくるため、遅れにつながります。

 : リセットされる見積もり
途中で見積もりが大幅に変更されるケースで、一番大きいのは「いったんゲームが完成してから企画者の一存で最初からやり直したケース」です。
ゲーム制作が完了していても、実際に発売されるまでは安心してはいけません、株主を含む立場の強い企画者は、積み上げてきた物をバベルの塔を破壊@<fn>{メテオフォール型開発}するがのごとく、@<b>{見積もりを含む全てのシステムをすべてを無にします}。

//footnote[メテオフォール型開発][ゲーム制作時代は「バベルの塔を破壊された」と言ってましたが、最近では「メテオフォール型開発」@<href>{http://eiki.hatenablog.jp/entry/meteo_fall} という言葉が生まれました。]

 : 有名人を企画者にしたときの見積もり
有名人が書いた、紙一枚のプロットだけで見積もりを作成するケースです。そこからゲームを制作して、作ったものに対してその「有名人」が納得すれば、楽なケースとなります。

このケースは注意が必要です。事前に有名人とのコミュニケーションをとっている場合であっても、ゲーム制作側と有名人との齟齬が発生してしまいます。
この齟齬が大きくなればなるほど、見積もり変更も大きくなります、こちらも「バベルの塔の破壊」が発生することがあり、とても注意が必要です。


== 遅れを取り返す行動
遅れを取り戻す行動としては、企画者とエンジニアでは次のような行動をしていました。

 * 企画者の行動
     ** 見積もりを守る行動
        *** メイン企画者を無視するサブ企画者
        *** できあがりは違うが、次作でと考える企画者
        *** エンジニアのいうことを聞く企画者
     ** 見積もりを守らない行動
        *** できる物が良くなるから売れる、だから見積もりし直してもよいという企画者
        *** 新機種だから売れる、だから見積もりし直してもよいという企画者
 * エンジニアの行動
     ** 遅れを取り戻すエンジニア
        *** 企画の叩きを作るエンジニア
        *** 空気を読むエンジニア
        *** 複数のパターンを作るエンジニア
        *** 会社に泊まり込むエンジニア
        *** 会社を辞めるエンジニア

== 企画者の行動、見積もりを守る行動

 : メイン企画者とサブ企画者

メイン企画者とサブ企画者のように、役割分担ができているとうまくいくケースがあります。
たえばメイン企画者がストーリー作成に走ってしまったケースでは、補佐する形でサブ企画者がプロットを含めたゲームシステムの構築をすると、うまく役割分担できます、このような@<b>{複数人の企画者を設定する}のは、ゲームシステムを作るうえでとても重要であり、効果があります。

 : できあがりは違うが、次作でと考える企画者

割り切りできる企画者であれば、できあがりが納得できないケースであっても「次作で実現すればよい」と考えます、これができるようになれば次作のクオリティは良くなります、@<b>{エンジニアも次作のモチベーションがあがります}。企画者は葛藤しますが、割り切りが大事です。

 : エンジニアのいうことを聞く企画者
できあがりが納得できないからといって、企画者の言うことを全部聞いていたら永久に終わりません。
スケジュールが最優先であり、企画者のいうことよりも、それは仕様であると決めて見積もりが変更されないようにします。@<b>{スケジュールを守らない企画者はエンジニアのいうことを聞くのが大事}です。

== 企画者の行動、見積もりを守らない行動

 : できる物が良くなるから、だから見積もりし直してもよいという企画者

こちらは、スケジュールの遅れについて修正が効かないケースです。
企画者は自分の作ったものに絶対の自信があります。だからこそ、作り直しや修正を求める企画者もいます。
これは受け入れるしかないです。まずは受け入れることが大事です。
売れる売れないに関しては発売したあとに決まるのであり、@<b>{納得できなくても企画者のいうことを信じて足並み揃えて進むのがよい}です。

 : 新機種だから売れる、だから見積もりし直してもよいという企画者

こちらも、スケジュールの遅れについて修正が効かないケースです。
ゲーム制作途中で新機種の発表があり、制作しているゲームを新機種に切り替えることがあります。それまでのターゲットマシンと新機種では、アーキテクチャーが似ていても完全に作り直しを避けることはできません。
このケースでは@<b>{素直に再見積もりしてゼロから再スタートがよい}です。

== 遅れを取り返すエンジニアの行動

 : 企画の叩きを作るエンジニア

企画がなければ別の人が作ればよい、その上で見積もりも作成すればよい、というケースです。
現実にはとても多いケースです。リードエンジニアという立場になると、これを専業にしている人もいるほどです。利点としては、エンジニアが安心して作業に集中できる点があります。
企画者との折衝はリードエンジニアがしているので、@<b>{余計な気遣いも無く大きな仕様変更も発生しにくい}ためです。

 : 空気を読むエンジニア

普段の会話から企画者の意図を読み取って、ゲームを作ればよいケースです。
その意図があっているなら効率が高いのですが、あわないまま制作をすると作り直しになるし@<b>{エビデンスが残っていないので言った言わない論争に発展することが多い}ため、お勧めしない方法です。

 : 複数のパターンを作るエンジニア

企画者の感性でゲーム内容が変わるので、あらかじめ想定される内容を複数作成すればよいというケースです。
これを実現するのは難易度が高いですが、ABテストのような少しの修正で見え方が変わるのであれば、実行して損はありません。
@<b>{企画者も納得しやすいので効果が高く}、エビデンスも残るのでお勧めの対応方法です。

 : 会社に泊まり込むエンジニア

時間がないなら24時間働けばよい、というケースです。
見積もりより大幅に遅れたケースでは、当時は会社に泊まり込み、土日も全て仕事をすることで遅れを取り戻していました。
@<b>{今の時代では、行なうべきやり方ではありません。}

 : 会社を辞めるエンジニア

無理な見積もりで、どう考えても無理なら撤退するケースも考えていいでしょう。@<b>{身体を壊してまで仕事をする必要はありません。}
無理ならば止めることも選択肢です、会社が受け入れないときは退社も考えましょう。

== まとめ

ゲーム制作の現場は、曖昧な見積もりが多いです。
これらのケースは今の時代もあるかもしれませんし、ゲーム制作ではない制作現場や、スタートアップ企業でもあり得るかもしれません。

@<b>{このアンチパターンを覚えておけば事前に回避できるかもしれません}。しかし可能であれば、多くの方がこのような状況を経験しないことを祈ります。
